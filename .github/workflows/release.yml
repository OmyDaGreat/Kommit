name: Build and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.*'
      - 'LICENSE'
      - '.github/**/*.md'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linuxX64
            executable: app.kexe
            artifact: kommit-linux-x64
          - os: macos-latest
            target: macosX64
            executable: app.kexe
            artifact: kommit-macos-x64
          - os: macos-latest
            target: macosArm64
            executable: app.kexe
            artifact: kommit-macos-arm64
          - os: windows-latest
            target: mingwX64
            executable: app.exe
            artifact: kommit-windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Kotlin
        uses: fwilhe2/setup-kotlin@v1
        with:
          version: '2.2.0'

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Determine Version
        id: version
        run: |
          # Get the latest tag or default to 0.1.0 if no tags exist
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            latest_version="0.1.0"
          else
            latest_version="${latest_tag#v}"
          fi

          # Split version into major, minor, patch
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Bump version based on input or default to patch
          bump_type="${{ github.event.inputs.version_bump || 'patch' }}"

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT

      - name: Get latest commit message
        id: commit_message
        run: |
          latest_commit_message=$(git log -1 --pretty=format:%s)
          echo "latest_commit_message=$latest_commit_message" >> $GITHUB_OUTPUT

      - name: Make Gradlew executable
        run: chmod +x gradlew

      - name: Build Native Binary
        run: ./gradlew :app:linkReleaseExecutable${{ matrix.target }}

      - name: Prepare Binary
        run: |
          mkdir -p dist
          cp app/build/bin/${{ matrix.target }}/releaseExecutable/${{ matrix.executable }} dist/kommit${{ matrix.target == 'mingwX64' && '.exe' || '' }}
          
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/kommit${{ matrix.target == 'mingwX64' && '.exe' || '' }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Determine Version
        id: version
        run: |
          # Get the latest tag or default to 0.1.0 if no tags exist
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            latest_version="0.1.0"
          else
            latest_version="${latest_tag#v}"
          fi

          # Split version into major, minor, patch
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Bump version based on input or default to patch
          bump_type="${{ github.event.inputs.version_bump || 'patch' }}"

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the latest tag or use the initial commit if no tags exist
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            # If no tags exist, get all commits
            echo "No previous tags found, including all commits in changelog"
            changelog=$(git log --pretty=format:"* %s" --reverse)
          else
            # Get commits since the last tag
            echo "Getting commits since $latest_tag"
            changelog=$(git log ${latest_tag}..HEAD --pretty=format:"* %s" --reverse)

            # If no commits since last tag, add a message
            if [ -z "$changelog" ]; then
              changelog="No changes since last release"
            fi
          fi

          # Escape newlines for GitHub Actions output
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"

          echo "changelog=$changelog" >> $GITHUB_OUTPUT

      - name: Prepare Release Files
        run: |
          mkdir -p release
          
          # Copy binaries and rename them appropriately
          cp artifacts/kommit-linux-x64/kommit release/kommit-linux-x64
          cp artifacts/kommit-macos-x64/kommit release/kommit-macos-x64
          cp artifacts/kommit-macos-arm64/kommit release/kommit-macos-arm64
          cp artifacts/kommit-windows-x64/kommit.exe release/kommit-windows-x64.exe
          
          # Copy additional files if they exist
          cp LICENSE release/ || echo "LICENSE file not found"
          cp README.adoc release/ || echo "README.adoc file not found"
          cp .kommit.yaml release/ || echo ".kommit.yaml file not found"

      - name: Calculate SHA256 checksums
        id: checksums
        run: |
          cd release
          sha256sum kommit-linux-x64 > checksums.txt
          sha256sum kommit-macos-x64 >> checksums.txt
          sha256sum kommit-macos-arm64 >> checksums.txt
          sha256sum kommit-windows-x64.exe >> checksums.txt
          
          # Get individual checksums for package managers
          linux_sha=$(sha256sum kommit-linux-x64 | awk '{print $1}')
          macos_x64_sha=$(sha256sum kommit-macos-x64 | awk '{print $1}')
          macos_arm64_sha=$(sha256sum kommit-macos-arm64 | awk '{print $1}')
          windows_sha=$(sha256sum kommit-windows-x64.exe | awk '{print $1}')
          
          echo "linux_sha256=$linux_sha" >> $GITHUB_OUTPUT
          echo "macos_x64_sha256=$macos_x64_sha" >> $GITHUB_OUTPUT
          echo "macos_arm64_sha256=$macos_arm64_sha" >> $GITHUB_OUTPUT
          echo "windows_sha256=$windows_sha" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            # 🚀 Release ${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}

            **Kommit** is a Kotlin-based conventional commit message generator that helps you create standardized commit messages following best practices.

            ## 📋 What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## 📦 Installation

            ### 🪣 Via Homebrew (macOS/Linux)
            ```bash
            brew tap OmyDaGreat/malefic
            brew install kommit
            ```

            ### 🪣 Via Scoop (Windows)
            ```powershell
            scoop bucket add malefic https://github.com/OmyDaGreat/MaleficBucket
            scoop install kommit
            ```

            ### 📥 Direct Download
            Download the appropriate binary for your platform:
            - **Linux x64**: [kommit-linux-x64](https://github.com/OmyDaGreat/Kommit/releases/download/${{ steps.version.outputs.tag }}/kommit-linux-x64)
            - **macOS x64**: [kommit-macos-x64](https://github.com/OmyDaGreat/Kommit/releases/download/${{ steps.version.outputs.tag }}/kommit-macos-x64)  
            - **macOS ARM64**: [kommit-macos-arm64](https://github.com/OmyDaGreat/Kommit/releases/download/${{ steps.version.outputs.tag }}/kommit-macos-arm64)
            - **Windows x64**: [kommit-windows-x64.exe](https://github.com/OmyDaGreat/Kommit/releases/download/${{ steps.version.outputs.tag }}/kommit-windows-x64.exe)

            ## 🔐 Verification

            ### 🔑 SHA256 Checksums
            ```
            Linux x64:   ${{ steps.checksums.outputs.linux_sha256 }}
            macOS x64:   ${{ steps.checksums.outputs.macos_x64_sha256 }}
            macOS ARM64: ${{ steps.checksums.outputs.macos_arm64_sha256 }}
            Windows x64: ${{ steps.checksums.outputs.windows_sha256 }}
            ```

            ## 📚 Documentation
            For more information, check out the [README](https://github.com/OmyDaGreat/Kommit/blob/main/README.adoc) file.

            ## 🙏 Feedback
            If you encounter any issues or have suggestions, please [open an issue](https://github.com/OmyDaGreat/Kommit/issues/new) on GitHub.
          draft: false
          prerelease: false
          files: |
            release/*
